#include <iom16v.h>
#include <macros.h>

char chinese1[25][32]={


/*--  文字:  电  --*/
/*--  新宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x80,0x00,0x80,0x00,0x80,0x00,0xFC,0x1F,0x84,0x10,0x84,0x10,0x84,0x10,0xFC,0x1F,
0x84,0x10,0x84,0x10,0x84,0x10,0xFC,0x1F,0x84,0x50,0x80,0x40,0x80,0x40,0x00,0x7F,

/*--  文字:  子  --*/
/*--  新宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x00,0x00,0xFE,0x1F,0x00,0x08,0x00,0x04,0x00,0x02,0x80,0x01,0x80,0x00,0xFF,0x7F,
0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0xA0,0x00,0x40,0x00,

/*--  文字:  科  --*/
/*--  新宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x10,0x08,0xB8,0x08,0x0F,0x09,0x08,0x09,0x08,0x08,0xBF,0x08,0x08,0x09,0x1C,0x09,
0x2C,0x08,0x0A,0x78,0xCA,0x0F,0x09,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,

/*--  文字:  技  --*/
/*--  新宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x08,0x04,0x08,0x04,0x08,0x04,0xC8,0x7F,0x3F,0x04,0x08,0x04,0x08,0x04,0xA8,0x3F,
0x18,0x21,0x0C,0x11,0x0B,0x12,0x08,0x0A,0x08,0x04,0x08,0x0A,0x8A,0x11,0x64,0x60,

/*--  文字:  大  --*/
/*--  新宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0xFF,0x7F,0x80,0x00,0x80,0x00,
0x40,0x01,0x40,0x01,0x20,0x02,0x20,0x02,0x10,0x04,0x08,0x08,0x04,0x10,0x03,0x60,

/*--  文字:  学  --*/
/*--  新宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x44,0x10,0x88,0x10,0x88,0x08,0x00,0x04,0xFE,0x7F,0x02,0x40,0x01,0x20,0xF8,0x07,
0x00,0x02,0x80,0x01,0xFF,0x7F,0x80,0x00,0x80,0x00,0x80,0x00,0xA0,0x00,0x40,0x00,

/*--  文字:  中  --*/
/*--  新宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0xFC,0x1F,0x84,0x10,0x84,0x10,0x84,0x10,
0x84,0x10,0x84,0x10,0xFC,0x1F,0x84,0x10,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,

/*--  文字:  山  --*/
/*--  新宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x84,0x10,0x84,0x10,0x84,0x10,0x84,0x10,
0x84,0x10,0x84,0x10,0x84,0x10,0x84,0x10,0x84,0x10,0xFC,0x1F,0x00,0x10,0x00,0x00,

/*--  文字:  学  --*/
/*--  新宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x44,0x10,0x88,0x10,0x88,0x08,0x00,0x04,0xFE,0x7F,0x02,0x40,0x01,0x20,0xF8,0x07,
0x00,0x02,0x80,0x01,0xFF,0x7F,0x80,0x00,0x80,0x00,0x80,0x00,0xA0,0x00,0x40,0x00,

/*--  文字:  院  --*/
/*--  新宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x00,0x02,0x1E,0x04,0xD2,0x7F,0x4A,0x40,0x2A,0x20,0x86,0x1F,0x0A,0x00,0x12,0x00,
0xD2,0x7F,0x12,0x09,0x16,0x09,0x0A,0x09,0x82,0x48,0x82,0x48,0x42,0x70,0x22,0x00,

/*--  文字:  大  --*/
/*--  新宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0xFF,0x7F,0x80,0x00,0x80,0x00,
0x40,0x01,0x40,0x01,0x20,0x02,0x20,0x02,0x10,0x04,0x08,0x08,0x04,0x10,0x03,0x60,

/*--  文字:  型  --*/
/*--  新宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x00,0x20,0xFE,0x21,0x48,0x24,0x48,0x24,0x48,0x24,0xFF,0x25,0x48,0x24,0x44,0x20,
0x44,0x28,0x82,0x10,0x81,0x00,0xFC,0x1F,0x80,0x00,0x80,0x00,0xFF,0x7F,0x00,0x00,

/*--  文字:  企  --*/
/*--  新宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x80,0x00,0x80,0x00,0x40,0x01,0x20,0x02,0x10,0x04,0x8C,0x18,0x83,0x60,0x80,0x00,
0x88,0x00,0x88,0x1F,0x88,0x00,0x88,0x00,0x88,0x00,0x88,0x00,0xFF,0x7F,0x00,0x00,

/*--  文字:  业  --*/
/*--  新宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x20,0x02,0x20,0x02,0x20,0x02,0x20,0x02,0x22,0x22,0x24,0x22,0x24,0x12,0x28,0x12,
0x28,0x0A,0x28,0x06,0x20,0x02,0x20,0x02,0x20,0x02,0x20,0x02,0xFF,0x7F,0x00,0x00,

/*--  文字:  招  --*/
/*--  新宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x08,0x00,0xC8,0x3F,0x08,0x21,0x08,0x21,0x3F,0x21,0x88,0x20,0x88,0x28,0x48,0x10,
0x38,0x00,0x8C,0x3F,0x8B,0x20,0x88,0x20,0x88,0x20,0x88,0x20,0x8A,0x3F,0x84,0x20,

/*--  文字:  聘  --*/
/*--  新宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x00,0x04,0x3F,0x04,0x92,0x3F,0x92,0x24,0x9E,0x3F,0x92,0x24,0x92,0x3F,0x1E,0x00,
0xD2,0x7F,0x12,0x01,0xB2,0x00,0x9E,0x3F,0x13,0x20,0x10,0x20,0x10,0x14,0x10,0x08,

/*--  文字:  会  --*/
/*--  新宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x80,0x00,0x80,0x00,0x40,0x01,0x20,0x02,0x10,0x04,0x0C,0x18,0xF3,0x67,0x00,0x00,
0x00,0x00,0xFE,0x3F,0x40,0x00,0x20,0x00,0x10,0x04,0x08,0x08,0xFC,0x1F,0x08,0x10,


{0x09,0x00,0x09,0x80,0x11,0x04,0x13,0xFE,0x22,0x04,0x34,0x48,0x68,0x40,0xA2,0x50,
0x23,0x48,0x22,0x48,0x24,0x44,0x24,0x46,0x28,0x44,0x21,0x40,0x20,0x80,0x00,0x00},/*"你",0*/

{0x10,0x00,0x11,0xFC,0x10,0x08,0x10,0x10,0xFC,0x20,0x24,0x20,0x24,0x20,0x27,0xFE},
{0x44,0x20,0x64,0x20,0x18,0x20,0x08,0x20,0x14,0x20,0x26,0x20,0x44,0xA0,0x80,0x40},/*"好",1*/

{0x00,0x00,0x03,0xF8,0x78,0x08,0x49,0x08,0x49,0x08,0x49,0x08,0x49,0x08,0x4B,0xFC},
{0x49,0x04,0x78,0x04,0x4B,0xF4,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x14,0x00,0x08},/*"吗",2*/


};


#define CLR_SHCLK() PORTC &= ~(1<<0)//移位时钟 SCLK
#define SET_SHCLK() PORTC |= (1<<0)	//移位时钟 SCLK，上升沿

#define CLR_STCLK() PORTC &= ~(1<<1) //锁存时钟 RCLK
#define SET_STCLK() PORTC |= (1<<1)	//拉高锁存时钟，上升沿

#define CLR_DS()	PORTC &= ~(1<<3)//清零
#define SET_DS()	PORTC |= (1<<3)	//置位


unsigned char sel_chinese_num = 0;
unsigned char shift_number = 0;
unsigned char sel_line_num = 0;
unsigned char time_50ms_count = 0;
unsigned char time_50ms_ok = 0;



void port_init(void)
{
	DDRC |= (1<<0)|(1<<1)|(1<<2)|(1<<3);
	DDRD |= (1<<0)|(1<<1)|(1<<2)|(1<<3);
}



void HC595_send_byte(unsigned char sel_chinese_num,unsigned char shift_number,unsigned char sel_line_num)
{
	unsigned char i,j;
	if(shift_number == 0)
		sel_chinese_num += 3;
	else
		sel_chinese_num += 4;
		
		
	if(shift_number == 0)
	{
		for(i=0;i<4;i++)
		{
			for(j=0;j<8;j++)
			{
				if((chinese1[sel_chinese_num][sel_line_num*2+1] &(1<<(7-j))) == 0)
					CLR_DS();
				else
					SET_DS();
				CLR_SHCLK();
				SET_SHCLK();
			}
			for(j=0;j<8;j++)
			{
				if((chinese1[sel_chinese_num][sel_line_num*2] &(1<<(7-j))) == 0)
					CLR_DS();
				else
					SET_DS();
				CLR_SHCLK();
				SET_SHCLK();
			}
			sel_chinese_num--;
		}
		CLR_STCLK();
		SET_STCLK();
		return;
	}
	
	
	
	else if(shift_number < 8)
	{
		for(i=0;i<shift_number;i++)
		{
			if((chinese1[sel_chinese_num][sel_line_num*2] & (1 << (shift_number - i + 1))) == 0)
				CLR_DS();
			else
				SET_DS();
			CLR_SHCLK();
			SET_SHCLK();
		}
		sel_chinese_num--;
		for(i=0;i<3;i++)
		{
			for(j=0;j<8;j++)
			{
				if((chinese1[sel_chinese_num][sel_line_num*2+1] & (1 << (7-j))) == 0)
					CLR_DS();
				else
					SET_DS();
				CLR_SHCLK();
				SET_SHCLK();
			}
			for(j=0;j<8;j++)
			{
				if((chinese1[sel_chinese_num][sel_line_num*2] & (1 << (7-j))) == 0)
					CLR_DS();
				else
					SET_DS();
				CLR_SHCLK();
				SET_SHCLK();
			}
			sel_chinese_num--;
		}
		for(i=0;i<8;i++)
		{
			if((chinese1[sel_chinese_num][sel_line_num*2+1] & (1 << (7-i))) == 0)
				CLR_DS();
			else
				SET_DS();
			CLR_SHCLK();
			SET_SHCLK();
		}
		for(i=0;i<8-shift_number;i++)
		{
			if((chinese1[sel_chinese_num][sel_line_num*2] & (1 << (7-i))) == 0)
				CLR_DS();
			else
				SET_DS();
			CLR_SHCLK();
			SET_SHCLK();
		}
		CLR_STCLK();
		SET_STCLK();
	}
	
	
	
	else if(shift_number == 8)
	{
		for(i=0;i<8;i++)
		{
			if((chinese1[sel_chinese_num][sel_line_num*2] & (1 << (7-i))) == 0)
				CLR_DS();
			else
				SET_DS();
			CLR_SHCLK();
			SET_SHCLK();
		}
		sel_chinese_num--;
		for(i=0;i<3;i++)
		{
			for(j=0;j<8;j++)
			{
				if((chinese1[sel_chinese_num][sel_line_num*2+1] & (1 << (7-j))) == 0)
					CLR_DS();
				else
					SET_DS();
				CLR_SHCLK();
				SET_SHCLK();
			}
			for(j=0;j<8;j++)
			{
				if((chinese1[sel_chinese_num][sel_line_num*2] & (1 << (7-j))) == 0)
					CLR_DS();
				else
					SET_DS();
				CLR_SHCLK();
				SET_SHCLK();
			}
			sel_chinese_num--;
		}
		for(i=0;i<8;i++)
		{
			if((chinese1[sel_chinese_num][sel_line_num*2+1] & (1 << (7-i))) == 0)
				CLR_DS();
			else
				SET_DS();
			CLR_SHCLK();
			SET_SHCLK();
		}
		CLR_STCLK();
		SET_STCLK();
	}
	
	
	
	else
	{
		for(i=0;i<shift_number-8;i++)
		{
			if((chinese1[sel_chinese_num][sel_line_num*2+1] & (1 << (shift_number-9-i))) == 0)
				CLR_DS();
			else
				SET_DS();
			CLR_SHCLK();
			SET_SHCLK();
		}
		for(i=0;i<8;i++)
		{
			if((chinese1[sel_chinese_num][sel_line_num*2] & (1 << (7-i))) == 0)
				CLR_DS();
			else
				SET_DS();
			CLR_SHCLK();
			SET_SHCLK();
		}
		sel_chinese_num--;
		for(i=0;i<3;i++)
		{
			for(j=0;j<8;j++)
			{
				if((chinese1[sel_chinese_num][sel_line_num*2+1] & (1 << (7-j))) == 0)
					CLR_DS();
				else
					SET_DS();
				CLR_SHCLK();
				SET_SHCLK();
			}
			for(j=0;j<8;j++)
			{
				if((chinese1[sel_chinese_num][sel_line_num*2] & (1 << (7-j))) == 0)
					CLR_DS();
				else
					SET_DS();
				CLR_SHCLK();
				SET_SHCLK();
			}
			sel_chinese_num--;
		}
		for(i=0;i<16-shift_number;i++)
		{
			if((chinese1[sel_chinese_num][sel_line_num*2+1] & (1 << (7-i))) == 0)
				CLR_DS();
			else
				SET_DS();
			CLR_SHCLK();
			SET_SHCLK();
		}
		CLR_STCLK();
		SET_STCLK();
	}
	
	
	
}


//ICC-AVR application builder : 2018/5/11 20:53:29
// Target : M16
// Crystal: 7.3728Mhz

//TIMER0 initialize - prescale:64
// WGM: Normal
// desired value: 2mSec
// actual value:  1.997mSec (0.2%)
void timer0_init(void)
{
	TCCR0 = 0x00; //stop
	TCNT0 = 0x1A; //set count
	OCR0  = 0xE6;  //set compare
	TCCR0 = 0x03; //start timer
}

#pragma interrupt_handler timer0_ovf_isr:iv_TIM0_OVF
void timer0_ovf_isr(void)
{
	TCNT0 = 0x1A; //reload counter value
	PORTC |= (1<<2);
	HC595_send_byte(sel_chinese_num,shift_number,sel_line_num);
	PORTD = 15 - sel_line_num;
	PORTC &= ~(1<<2);
	if(++sel_line_num >= 16)
		sel_line_num = 0;
	if(++time_50ms_count >= 25)
	{
		time_50ms_ok = 1;
		time_50ms_count = 0;
	}
}

//call this routine to initialize all peripherals
void init_devices(void)
{
	//stop errant interrupts until set up
	CLI(); //disable all interrupts
	port_init();
	timer0_init();

	MCUCR = 0x00;
	GICR  = 0x00;
	TIMSK = 0x01; //timer interrupt sources
	SEI(); //re-enable interrupts
	//all peripherals are now initialized
}


void main(void)
{
	unsigned char i;
	init_devices();
	while(1)
	{
		if(time_50ms_ok)
		{
			time_50ms_ok = 0;
			if(++shift_number >= 16)
			{
				shift_number = 0;
				if(++sel_chinese_num >= 13)
					sel_chinese_num = 0;
			}
		}
	}
}